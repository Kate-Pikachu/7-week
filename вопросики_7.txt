	1. Что такое контекстное переключение задач? 

Контекстное переключесние задач - процесс прекращения выполнения процессором одной задачи  с сохранением всей необходимой информации и состояния, 
необходимых для последующего продолжения с прерванного места, и восстановления и загрузки состояния задачи, к выполнению которой переходит процессор.


	2. Назовите основные подходы к организации параллелизма?

Разбить данные на блоки, с каждым из которых рабостает своя подпрограмма
- multi-proccesses - несколько процессов работают над одной задачей (mp)
	- процесс = код + данные + ресурс
	- у каждого процеса свои данные
- multi - threading - берем один процесс, в котором некоторые участки кода независимо работают (mt)
	 - каждые потоки могут между собой взаимодействовать

	3. Что может влиять на производительность параллельных алгоритмов? 

 - количество исполнителей 
 - конкуренция за данные
 - ложное разделение (строки кэша), 
 - локальность данных
 - безопасность относительно исключений
 - масштабируемость
 - закон Амдала - не учитывает что ядра умеют передавать данные


	4. Как в стандартной библиотеке реализована концепция асинхронного исполнения? 

механизм future:
статический объект, клоторый предоставляет значение "на потом" с помощью get

инструменты для работы с ним:
1) async - запускает в потоке функцию, результат завернет в объект типа future
std::future<int>result = std::async( [] () return 42 );

2) packeged_task  - задача, учитывает информацию в потоке

3) promice - обещание

	5. Что нужно учитывать при замене последовательной реализации алгоритма на параллельную?

 - объем вычислений
     При простых операциях ожидание основной памяти очень долгое и последовательная версия может обгонять параллельную (надо проводить замеры времени работы).









